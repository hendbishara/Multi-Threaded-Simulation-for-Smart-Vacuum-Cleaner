# Advanced-Topics-In-Programing-assignment3

# names of the contributers: Hend Bishara, Anan Ghanaim

# Description of the project files:
the project contains:
- Algo_209120054_207759085_Deterministic: a foldder that contains the cpp and h files of the first algorithm. and a separet cmake file for this project
- Algo_209120054_207759085_Random: a foldder that contains the cpp and h files of the second algorithm. and a separate cmae file for this project
- common_algo: folder that contains a base class that both algorithms inherit from and two other classes that both algorithms use.
- common: contains the provided abstract classes
- algorithm: contains the algorithm regestration
-simulator: folder that contains the classes needed to run the main (which is is myrobot.cpp)
- Houses: additional folder with 3 ecample house input and 2 out put example files for each input (one per algorithm), in addition there is a csv summary foled for this run. 

To build the whole project: the main and the two algorithms use this command:
rm -r build ; cmake -S . -B ./build ; cmake --build ./build

to run the simulator run this command after the build:

./build/myrobot

you can specify the command line arguments as well a described in the assignment

To build each project independently run these two commands:
for first project:
rm -r ./Algo_209120054_207759085_Deterministic/build; cmake -S Algo_209120054_207759085_Deterministic -B ./Algo_209120054_207759085_Deterministic/build ; cmake --build ./Algo_209120054_207759085_Deterministic/build
for second project:
rm -r ./Algo_209120054_207759085_Random/build; cmake -S Algo_209120054_207759085_Random -B ./Algo_209120054_207759085_Random/build ; cmake --build ./Algo_209120054_207759085_Random/build


# Brief description of the algorims
the two algorithms work mainly as described bellow:
it builds a map of the house while going through the house and cleaning it. when it is initialized it sets the coordinates [0,0] as the docking point and the point of reference from which the house map is built.
when the robot goes through the house the algorithm adds all non-wall points that surround the current point to the map it builds. for each point it updates the minimal distance from the docking station and the parent node from which the minimal path is reached.
the algorithm goes through the house using dfs technique. when the robot needs to move it chooses a direction* it can move in that has not been visited, adds it to the dfs stack, cleans and continues in the same manner until it can't move further in the stack and pops the last node, and so on. when the robot needs to go back to docking, for charging or because there are no more steps available, it uses the parent pointers to get to the docking in the shortest path possible. after charging the robot goes back to the top of the stack in the same way (using the shortest path achieved from the parent pointers that was saved in a separate stack) and continues the dfs run.

# the difference between the two algorithms is in the way they choose the next available direction to move in the dfs step (*): 
one algorithm is deterministic: chooses the first non-wall direction that has not been visisted
the second algorithm is random: chooses randomly a direction that is not a wall and not has not been visisted yet.

# Notes:
**If an algorithm communicates an ilegal step to the simulator, such as going into a wall, the simulator will print a proper error and end the simulation. the status will be DEAD.
** our main, myrobot.cpp, creates a Task for each algorithm-house pair, when calling on the run_tasks function, it creates a pool of threads according to the number of threads specified and starts assigning each task to an available thread. each task, when it starts running it starts the clock with a specified timer, if the task is not done running on this thread before the timer finishes the thread will be terminated and handeled in the timeHandler.
